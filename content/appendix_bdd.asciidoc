BDD with Django and Behave
==========================

:Date: 2014-10-09 16:30
:Tags: Django, BDD, FT
:Author: Harry
:Status: draft
:encoding: UTF-8


This blog post is a first draft of a planned appendix for my
http://www.obeythetestinggoat.com/book.html[book].  It's a whirlwind tour of
BDD, and I'd appreciate any feedback -- from existing readers or anyone coming
across the post randomly, does it work well as an intro to BDD?  From
experienced BDDers, have I presented any heinous examples of bad practice? Stop
me before I print it on dead trees!


What is BDD?
------------

BDD, 'strictly' speaking, is a methodology rather than a toolset -- it's the 
approach of testing your application by testing the behaviour that we expect it
to display to a user (the 
https://en.wikipedia.org/wiki/Behavior-driven_development[wikipedia] entry
has quite a good overview). So, in some ways, the selenium-based FTs that I've shown
in the rest of the book could be called BDD. 

But the term has become closely associated with a particular set of tools for
doing BDD, most importantly the 
https://github.com/cucumber/cucumber/wiki/Gherkin[Gherkin syntax], which is a
human-readable DSL for writing functional (or acceptance) tests. Gherkin
originally came out of the Ruby world, where it's associated with a test runner
called http://cukes.info/[Cucumber].

In the Python world, we have a couple of equivalent test running tools,
http://lettuce.it/[Lettuce] and http://pythonhosted.org/behave/[Behave].
Of these, only Behave is compatible with Python 3, so that's what we'll use.
We'll also use a plugin called 
https://github.com/django-behave/django-behave[django-behave] (thanks to 
the excellent Rachel Willmer!)


Getting the code for these examples
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I'm going to use the example from 
http://chimera.labs.oreilly.com/books/1234000000754/ch17.html[chapter 17 of my
book]. We have a basic to-do lists site, and we want to add a new feature:
logged-in users should be able to view the lists they've authored in one place.
Up until this point, all lists are effectively anonymous.

If you've been following along with the book, I'm going to assume you can skip
back to the code for that point.  If you want to pull it from my repo, the
place to go is the 
https://github.com/hjwp/book-example/tree/chapter_16[chapter_16 branch].



Basic housekeeping
~~~~~~~~~~~~~~~~~~

We make a module for our BDD tests:


[subs="specialcharacters,quotes"]
----
$ *mkdir bdd_tests*
$ *touch bdd_tests/__init__.py*
$ *touch bdd_tests/models.py*
----

Add a steps and a features directory (we'll find out what those are shortly!),
and placeholder for our first feature:

[subs="specialcharacters,quotes"]
----
$ *mkdir -p bdd_tests/features/steps*
$ *touch bdd_tests/features/my_lists.feature*
$ *touch bdd_tests/features/steps/my_lists.py*
$ *tree bdd_tests*
bdd_tests
`-- features
|   `-- my_lists.feature
|   `-- steps
|       `-- my_lists.py
`-- __init__.py
`-- models.py
----

And then run "behave" as a sanity-check

[subs="specialcharacters,quotes"]
----
$ *behave bdd_tests*
0 features passed, 0 failed, 0 skipped
0 scenarios passed, 0 failed, 0 skipped
0 steps passed, 0 failed, 0 skipped, 0 undefined
Took 0m0.000s
----


Writing an FT as a "Feature" using Gherkin syntax
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Up until now, we've been writing our FTs using human-readable comments
that describe the new feature in terms of a user story, interspersed
with the selenium code required to execute each step in the story.

BDD enforces a distinction between those two -- we write our human-readable
story using a human-readable (if occasionally somewhat awkward) syntax
called "Gherkin", and that is called the "Feature".  Later, we'll map
each line of gherkin to a function that contains the selenium code necessary
to implement that "step".

Here's what a Feature for our new "My lists" page could look like:

[role="sourcecode"]
.bdd_tests/features/my_lists.feature
[source,gherkin]
----
Feature: My Lists
    As a logged-in user
    I want to be able to see all my lists in one page
    So that I can find them all afer I've written them

    Scenario: Create two lists and see them on the My Lists page

        Given I am a logged-in user

        When I create a list with first item "Reticulate Splines"
            And I add an item "Immanentize Eschaton"
            And I create a list with first item "Buy milk"

        Then I will see a link to "My lists"

        When I click the link to "My lists"
        Then I will see a link to "Reticulate Splines"
        And I will see a link to "Buy milk"

        When I click the link to "Reticulate Splines"
        Then I will be on the "Reticulate Splines" list page
----

As-a / I want to / So that
^^^^^^^^^^^^^^^^^^^^^^^^^^

At the top you'll notice the As-a / I want to / So that clause.  This is
optional, and it has no executable counterpart -- it's just a slightly
formalised way of capturing the "Who and Why?" aspects of a user story,
gently encouraging the team to think about the justifications for each
feature.

Given / When / Then
^^^^^^^^^^^^^^^^^^

Given/When/Then is the real core of a BDD test.  This tripartite formulation
matches the setup/exercise/assert pattern we've seen in our unit tests, and
it represents the setup and assumptions phase, an exercise/action phase, and 
a subsequent assertion/observation phase.  There's more info on the 
https://github.com/cucumber/cucumber/wiki/Given-When-Then[cucumber wiki].


Not always a perfect fit!
^^^^^^^^^^^^^^^^^^^^^^^^^

As you can see, it's not always easy to shoe-horn a user story into exactly
three steps!  We can use the `And` clause to expand on a step, and I've
added multiple When steps and subsequent Thens to illustrate further aspects
of our My lists page.

In this human-readable syntax, each line (which begins with "Given", "And",
"When" or "Then") is a step, and it will be implemented in code using a step
function.



Coding the step functions
~~~~~~~~~~~~~~~~~~~~~~~~~

We now build the counterpart to our Gherkin-syntax feature, which are the
"step" functions which will actually implement them in code.


Generating placeholder steps
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

When we run "behave", it helpfully tells us about all the steps we need to
implement:

[role="sourcecode small-code"]
[subs="specialcharacters,quotes"]
----
$ *behave bdd_tests*
Feature: My Lists # bdd_tests/features/my_lists.feature:1

  Scenario:                                                   # bdd_tests/features/my_lists.feature:2
    Given I am a logged-in user                               # None
    When I create a list with first item "Reticulate Splines" # None
    And I add an item "Immanentize Eschaton"                  # None
    And I create a list with first item "Buy milk"            # None
    Then I will see a link to "My lists"                      # None
    When I click the link to "My lists"                       # None
    Then I will see a link to "Reticulate Splines"            # None
    And I will see a link to "Buy milk"                       # None
    When I click the link to "Reticulate Splines"             # None
    Then I will be on the "Reticulate Splines" list page      # None


Failing scenarios:
  bdd_tests/features/my_lists.feature:2  

0 features passed, 1 failed, 0 skipped
0 scenarios passed, 1 failed, 0 skipped
0 steps passed, 0 failed, 0 skipped, 10 undefined
Took 0m0.000s

You can implement step definitions for undefined steps with these snippets:

@given('I am a logged-in user')
def step_impl(context):
    assert False

@when('I create a list with first item "Reticulate Splines"')
def step_impl(context):
    assert False

@when('I add an item "Immanentize Eschaton"')
def step_impl(context):
    assert False

[...]
----

It's encouraging us to copy and paste these snippets, and use them as 
starting points to build our steps.


First step definition
~~~~~~~~~~~~~~~~~~~~~

Here's a first stab at making a step for our "Given I am a logged-in user"
step. I started by stealing the code for `create_pre_authenticated_session`
from 'functional_tests/test_my_lists.py', and adapting it slightly (removing
the server-side version, for example, although it would be easy to re-add
later).

[role="sourcecode"]
.bdd_tests/features/steps/my_lists.py
[source,python]
----
from behave import given, when, then, step
from functional_tests.management.commands.create_session import create_pre_authenticated_session
from django.conf import settings


@given('I am a logged-in user')
def given_i_am_logged_in(context):
    session_key = create_pre_authenticated_session(email='edith@example.com')
    ## to set a cookie we need to first visit the domain.
    ## 404 pages load the quickest!
    context.browser.get(context.server_url + "/404_no_such_url/")
    context.browser.add_cookie(dict(
        name=settings.SESSION_COOKIE_NAME,
        value=session_key,
        path='/',
    ))
----

The 'context' variable needs a little explaining -- it's a sort of global
variable, in the sense that it's passed to each step that's executed, and it
can be used to store information that we need to share between steps. Here
we've assumed we'll be storing a browser object on it, and the `server_url`.
We end up using it a lot like we used `self` when we were writing `unittest`
FTs.


setUp and tearDown equivalents in environment.py
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Steps can make changes to state in the `context`, but the place to do
preliminary set-up, the equivalent of `setUp`, is in a file called
'environment.py':


[role="sourcecode"]
.bdd_tests/features/environment.py
[source,python]
----
from selenium import webdriver

def before_all(context):
    context.browser = webdriver.Firefox()
    context.browser.implicitly_wait(2)
    context.server_url = 'http://localhost:8081'

def after_all(context):
    context.browser.quit()

def before_feature(context, feature):
    pass
----


And now we switch to the django-behave test runner:

[role="sourcecode small-code"]
[subs="specialcharacters,quotes"]
----
$ *python manage.py test bdd_tests --testrunner=django_behave.runner.DjangoBehaveTestSuiteRunner*
Creating test database for alias 'default'...
Feature: My Lists # bdd_tests/features/my_lists.feature:1

  Scenario:                                                   # bdd_tests/features/my_lists.feature:2
    Given I am a logged-in user                               # bdd_tests/features/steps/my_lists.py:7
    Given I am a logged-in user                               # bdd_tests/features/steps/my_lists.py:7 0.379s
    When I create a list with first item "Reticulate Splines" # bdd_tests/features/steps/my_lists.py:20 0.001s
      Traceback (most recent call last):
        File "/home/harry/.virtualenvs/superlists/lib/python3.4/site-packages/behave/model.py", line 1173, in run
          match.run(runner.context)
        File "/home/harry/.virtualenvs/superlists/lib/python3.4/site-packages/behave/model.py", line 1589, in run
          self.func(context, *args, **kwargs)
        File "bdd_tests/features/steps/my_lists.py", line 22, in step_impl
          assert False
      AssertionError
[...]   
----

And you'll notice all this output is nicely coloured, as in <<behave-output>>:

[[behave-output]]
.Behave with coloured console ouptut
image::images/behave-output-colour.png[Colourful console output]

That seems to have made it through the first step, let's define up the rest of
them.  



Capturing parameters in steps
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We'll see how behave allows you to capture parameters from step descriptions.
Our next step says:

[role="sourcecode"]
.bdd_tests/features/my_lists.feature
[source,gherkin]
----
    And I create a list with first item "Reticulate Splines"
----

And the auto-generated step definition looked like this

[role="sourcecode currentcontents"]
.bdd_tests/features/steps/test_my_lists.py
[source,python]
----
@given('I create a list with first item "Reticulate Splines"')
def step_impl(context):
    assert False
----

We want to be able to create lists with arbitrary first items, so it would be
nice to somehow capture whatever is between those quotes, and pass them in as
an argument to a more generic function.  That's a common requirement in BDD,
and behave has a nice syntax for it, reminiscent of the new-style Python string
formatting syntax:


[role="sourcecode"]
.bdd_tests/features/steps/test_my_lists.py
[source,python]
----
@when('I create a list with first item "{first_item_text}"')
def create_a_list(context, first_item_text):
    context.browser.get(context.server_url)
    context.browser.find_element_by_id('id_text').send_keys(first_item_text)
    context.browser.find_element_by_id('id_text').send_keys('\n')
----

Neat huh?

Similarly, we can do adding to an existing list, and see or click on links:


[role="sourcecode"]
.bdd_tests/features/steps/test_my_lists.py
[source,python]
----
@when('I add an item "{item_text}"')
def add_an_item(context, item_text):
    context.browser.find_element_by_id('id_text').send_keys(item_text)
    context.browser.find_element_by_id('id_text').send_keys('\n')

@then('I will see a link to "{link_text}"')
def see_a_link(context, link_text):
    context.browser.find_element_by_link_text(link_text)

@when('I click the link to "{link_text}"')
def click_link(context, link_text):
    context.browser.find_element_by_link_text(link_text).click()
----

And finally the slightly more complex step that says I am on the 
page for a particular list:

[role="sourcecode"]
.bdd_tests/features/steps/test_my_lists.py
[source,python]
----
@then('I will be on the "{first_item_text}" list page')
def step_impl(context, first_item_text):
    table = context.browser.find_element_by_id('id_list_table')
    rows = table.find_elements_by_tag_name('tr')
    expected_row_text = '1: ' + first_item_text
    assert rows[0].text == expected_row_text
----


Now we can run it and see our first expected failure:

[role="sourcecode small-code"]
[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test bdd_tests --testrunner=django_behave.runner.DjangoBehaveTestSuiteRunner*]
Creating test database for alias 'default'...
Feature: My Lists # bdd_tests/features/my_lists.feature:1
  As a logged-in user
  I want to be able to see all my lists in one page
  So that I can find them all afer I've written them
  Scenario: Create two lists and see them on the My Lists page  # bdd_tests/features/my_lists.feature:6
    Given I am a logged-in user                                 # bdd_tests/features/steps/my_lists.py:7
    Given I am a logged-in user                                 # bdd_tests/features/steps/my_lists.py:7 0.191s
    When I create a list with first item "Reticulate Splines"   # bdd_tests/features/steps/my_lists.py:20 2.130s
    And I add an item "Immanentize Eschaton"                    # bdd_tests/features/steps/my_lists.py:27 0.906s
    And I create a list with first item "Buy milk"              # bdd_tests/features/steps/my_lists.py:20 0.881s
    Then I will see a link to "My lists"                        # bdd_tests/features/steps/my_lists.py:33 2.169s
      Traceback (most recent call last):
        [...]
      selenium.common.exceptions.NoSuchElementException: Message: 'Unable to
        locate element: {"method":"link text","selector":"My lists"}' ;
        Stacktrace: [...]
      
      Captured logging:
      WARNING:django.request:Not Found: /404_no_such_url/
      WARNING:django.request:Not Found: /favicon.ico
      WARNING:django.request:Not Found: /favicon.ico

    When I click the link to "My lists"                         # None
    Then I will see a link to "Reticulate Splines"              # None
    And I will see a link to "Buy milk"                         # None
    When I click the link to "Reticulate Splines"               # None
    Then I will be on the "Reticulate Splines" list page        # None

Failing scenarios:
  bdd_tests/features/my_lists.feature:6  Create two lists and see them on the My Lists page

0 features passed, 1 failed, 0 skipped
0 scenarios passed, 1 failed, 0 skipped
4 steps passed, 1 failed, 5 skipped, 0 undefined
----

We manage to create our two lists successfully, but the "My lists" link does
not appear.


Comparing the inline-style FT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

I'm not going to run through the implementation of the feature, but you can 
see how the test will drive development just as well as the inline-style FT
would have.

Let's have a look at it, for comparison:

[role="sourcecode"]
.lists/tests.py
[source,python]
----
def test_logged_in_users_lists_are_saved_as_my_lists(self):
    # Edith is a logged-in user
    self.create_pre_authenticated_session('edith@example.com')

    # She goes to the home page and starts a list
    self.browser.get(self.server_url)
    self.get_item_input_box().send_keys('Reticulate splines\n')
    self.get_item_input_box().send_keys('Immanentize eschaton\n')
    first_list_url = self.browser.current_url

    # She notices a "My lists" link, for the first time.
    self.browser.find_element_by_link_text('My lists').click()

    # She sees that her list is in there, named according to its
    # first list item
    self.browser.find_element_by_link_text('Reticulate splines').click()
    self.assertEqual(self.browser.current_url, first_list_url)

    # She decides to start another list, just to see
    self.browser.get(self.server_url)
    self.get_item_input_box().send_keys('Click cows\n')
    second_list_url = self.browser.current_url

    # Under "my lists", her new list appears
    self.browser.find_element_by_link_text('My lists').click()
    self.browser.find_element_by_link_text('Click cows').click()
    self.assertEqual(self.browser.current_url, second_list_url)

    # She logs out.  The "My lists" option disappears
    self.browser.find_element_by_id('id_logout').click()
    self.assertEqual(
        self.browser.find_elements_by_link_text('My lists'),
        []
    )
----

That's 34 lines of code, to which we should add the 10 lines from
`create_pre_authenticated_session`, and 2 from `get_item_input_box`. That
compares pretty well with the 20 lines from the feature file (bearing in mind 3
of them were optional) and 40-odd lines in our steps file.  So in terms of
boilerplate/terseness, there's not much in it.


BDD encourages structured test code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The real appeal, for me, is that the BDD tool has forced us to structure our
test code.  In the inline-style FT, we're free to use as many lines as we want
to implement a step, as described by its comment line.  It's very hard to
resist the urge to just copy+paste code from elsewhere, or just from earlier
on in the test.   You can see that, by this point in the book, I've built
just a couple of helper functions (like `get_item_input_box`).

In contrast, the BDD syntax has immediately forced me to have a separate function for
each step, so I've already built some very reusable code to:

* Start a new list
* Add an item to an existing list
* Click a on a link with particular text
* Assert that I'm looking at a particular list's page

So BDD really encourages you to write test code that seems to match well with
the business domain, and to use a layer of abstraction between the story of
your FT, and its implementation in code.


Contrasting BDD with the Page pattern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In 
http://chimera.labs.oreilly.com/books/1234000000754/ch21.html[chapter 21]
of the book, I present an example of the "Page pattern", which is an
object-oriented approach to structuring your selenium tests.  Here's a
reminder of what it looks like:

[role="sourcecode"]
.functional_tests/test_sharing.py
[source,python]
----
from .home_and_list_pages import HomePage
[...]

class SharingTest(FunctionalTest):

    def test_logged_in_users_lists_are_saved_as_my_lists(self):
        # [...]
        list_page = HomePage(self).start_new_list('Get help')

        # She notices a "Share this list" option
        share_box = list_page.get_share_box()
        self.assertEqual(
            share_box.get_attribute('placeholder'),
            'your-friend@example.com'
        )

        # She shares her list.
        # The page updates to say that it's shared with Oniciferous:
        list_page.share_list_with('oniciferous@example.com')

        # Oniciferous now goes to the lists page with his browser
        self.browser = oni_browser
        HomePage(self).go_to_home_page().go_to_my_lists_page()
----

And the Page classes look like this:

[role="sourcecode"]
.functional_tests/home_and_lists_pages.py
[source,python]
----
class HomePage(object):

    def __init__(self, test):
        self.test = test


    def go_to_home_page(self):
        self.test.browser.get(self.test.server_url)
        self.test.wait_for(self.get_item_input)
        return self


    def get_item_input(self):
        return self.test.browser.find_element_by_id(ITEM_INPUT_ID)


    def start_new_list(self, item_text):
        self.go_to_home_page()
        inputbox = self.get_item_input()
        inputbox.send_keys(item_text + '\n')
        list_page = ListPage(self.test)
        list_page.wait_for_new_item_in_list(item_text, 1)
        return list_page


    def go_to_my_lists_page(self):
        [...]
----

So it's definitely possible to implement a similar layer of abstraction,
and a sort of DSL, in inline-style FTs, whether it's by using the Page
pattern or whatever structure you prefer -- but now it's a matter of
self-discipline, rather than having a framework that pushes you towards
it.

        # Edith is a logged-in user
        # She goes to the home page and starts a list
        # She notices a "My lists" link, for the first time.
        # She sees that her list is in there, named according to its
        # first list item
        # She decides to start another list, just to see
        # Under "my lists", her new list appears
        # She logs out.  The "My lists" option disappears


Conclusions
~~~~~~~~~~~

I've only dipped my toes into the BDD world, so I'm hesitant to draw
any firm conclusions. 

I find the "forced" structuring of FTs into steps very appealing though -- 
it looks like it has the potential to encourage a lot of reuse in your
FT code, and that it neatly separates concerns between describing the
story, and implementing it, and that it forces us to think about things
in terms of the business domain, rather than in terms of
what-we-need-to-do-with-selenium.


On the other hand, I can also see potential for the Gherkin syntax to
get quite frustrating.  Compare how expressive and readable the 
inline-style comments are, with the slightly awkward BDD feature:

        # Edith is a logged-in user
        # She goes to the home page and starts a list
        # She notices a "My lists" link, for the first time.
        # She sees that her list is in there, named according to its
        # first list item
        # She decides to start another list, just to see
        # Under "my lists", her new list appears
        # She logs out.  The "My lists" option disappears


So that could definitely be an issue.  I also would like to see
how BDD scales once you have not just one or two features, and
four or five steps, but several dozen features and hundreds of
lines of steps code...


I'd love to hear from people with more experience than me!  Have
you used BDD on a large project?  What are the challenges with
scaling it?   Is there a way of adding comments to a feature file?



.BDD conclusions
*******************************************************************************

Encourages structured, reusable test code::
    By separating concerns, breaking your FTs out into the human-readable,
    Gherkin syntax "feature" file and a separate implementation of steps
    functions, BDD has the potential to encourage more reusable and manageable
    test code

It may come at the expense of readability::
    The Gherkin syntax, for all its attempt to be human-readable, is ultimately
    a constraint on human language, and so it may not capture nuance and intention
    as well as inline comments do.

Will nonprogrammers write tests?::
    I haven't touched on one of the original promises of BDD, which is that
    nonprogrammers -- business or client representatives perhaps -- might
    actually write the Gherkin syntax.  I'm quite skeptical about whether 
    this would actually work in the real world, but I don't think that detracts
    from the other potential benefits of BDD.

*******************************************************************************

