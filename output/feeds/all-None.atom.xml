<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Obey the Testing Goat!</title><link href="http://www.obeythetestinggoat.com/" rel="alternate"></link><link href="http://www.obeythetestinggoat.com/feeds/all-None.atom.xml" rel="self"></link><id>http://www.obeythetestinggoat.com/</id><updated>2013-10-19T16:05:00+01:00</updated><entry><title>Unit testing Ajax calls: if you’re not using a mocking library, it’s a world of pain</title><link href="http://www.obeythetestinggoat.com/unit-testing-ajax-calls-if-youre-not-using-a-mocking-library-its-a-world-of-pain-None.html" rel="alternate"></link><updated>2013-10-19T16:05:00+01:00</updated><author><name>Harry</name></author><id>tag:www.obeythetestinggoat.com,2013-10-19:unit-testing-ajax-calls-if-youre-not-using-a-mocking-library-its-a-world-of-pain-None.html</id><summary type="html">&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;em&gt;tl;dr: I found myself going through increasing contortions trying
to TDD some JavaScript code with Ajax in.  Once I started using
sinon.js, all the pain went away. Folks, don&amp;#8217;t try to roll your
own JavaScript mocks.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;ve been playing around with
&lt;a href="https://developer.mozilla.org/en-US/Persona"&gt;Mozilla Persona&lt;/a&gt;
as an authentication platform, and I knocked together this basic code to
interact with their API.  You can see it&amp;#8217;s quite dense, but fairly readable:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; currentUser &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'{{ user.email }}'&lt;/span&gt; &lt;span style="color: #990000"&gt;||&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;null&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; csrf_token &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'{{ csrf_token }}'&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;

navigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;watch&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
  loggedInUser&lt;span style="color: #990000"&gt;:&lt;/span&gt; currentUser&lt;span style="color: #990000"&gt;,&lt;/span&gt;
  onlogin&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;assertion&lt;span style="color: #990000"&gt;)&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    $&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;post&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'/accounts/login'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;assertion&lt;span style="color: #990000"&gt;:&lt;/span&gt; assertion&lt;span style="color: #990000"&gt;,&lt;/span&gt; csrfmiddlewaretoken&lt;span style="color: #990000"&gt;:&lt;/span&gt; csrf_token&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    &lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;done&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; window&lt;span style="color: #990000"&gt;.&lt;/span&gt;location&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;reload&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt; &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    &lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;fail&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; navigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;logout&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt;&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
  &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt;
  onlogout&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    $&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;post&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'/accounts/logout'&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    &lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;always&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; window&lt;span style="color: #990000"&gt;.&lt;/span&gt;location&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;reload&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt; &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
  &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We call a function called &lt;span class="monospaced"&gt;watch&lt;/span&gt;, passing it in an email address
string, and two callbacks for login and logout.  Login does a post,
refreshes the page if it succeeds, and calls a logout if it fails.
Logout just does a post and a refresh. Typical JavaScript, 3 levels
of nested callbacks, but it actually reads through quite well&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So off I go on my merry way, planning to de-spike this code and
re-write it with TDD.  Mockin' libraries?  We don&amp;#8217;t need no stinkin'
mockin' libraries.  Im&amp;#8217;a roll my own, cos you can totes do that in
JavaScript:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"initialize binds sign in button to navigator.id.request"&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; requestWasCalled &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; mockRequestFunction &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; requestWasCalled &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt; &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; mockNavigator &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        id&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
            request&lt;span style="color: #990000"&gt;:&lt;/span&gt; mockRequestFunction&lt;span style="color: #990000"&gt;,&lt;/span&gt;
            watch&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{}&lt;/span&gt;
        &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;

    Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;requestWasCalled&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check request not called before click'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

    $&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'#id_login'&lt;/span&gt;&lt;span style="color: #990000"&gt;).&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;trigger&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'click'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;requestWasCalled&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check request called after click'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So far, so slightly-awkward-but-not-too-bad. But look how badly things go wrong
once you start to try and write tests for more deeply nested callbacks:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"initialize calls navigator.id.watch"&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; user &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'current user'&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; token &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'csrf token'&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; urls &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; login&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'login url'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; logout&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'logout url'&lt;/span&gt;&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; watchFunctionCalled &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; mockWatchFunction &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;params&lt;span style="color: #990000"&gt;)&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;params&lt;span style="color: #990000"&gt;.&lt;/span&gt;loggedInUser&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check user'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;params&lt;span style="color: #990000"&gt;.&lt;/span&gt;onlogin&lt;span style="color: #990000"&gt;,&lt;/span&gt; Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;submitAssertion&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check login fn'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt; &lt;span style="font-style: italic"&gt;&lt;span style="color: #9A1900"&gt;//&lt;b&gt;&amp;lt;1&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;params&lt;span style="color: #990000"&gt;.&lt;/span&gt;onlogout&lt;span style="color: #990000"&gt;,&lt;/span&gt; Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;logOut&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check logout fn'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt; &lt;span style="font-style: italic"&gt;&lt;span style="color: #9A1900"&gt;//&lt;b&gt;&amp;lt;1&amp;gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;
        watchFunctionCalled &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; mockNavigator &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; id&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; watch&lt;span style="color: #990000"&gt;:&lt;/span&gt; mockWatchFunction &lt;span style="color: #FF0000"&gt;}&lt;/span&gt; &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;

    Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; token&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;);&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;watchFunctionCalled&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check watch function called'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="colist arabic"&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
You can see I ended up rewriting my anonymous callbacks as named functions
    in order to make them available to test.
&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now, was this the unit tests being useful, forcing me to break up my code into
smaller, more self-contained components?  I&amp;#8217;ll let you judge for yourself what
you think of the readability of the new code, compared to the old code:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;$&lt;span style="color: #990000"&gt;(&lt;/span&gt;document&lt;span style="color: #990000"&gt;).&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;ready&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; accountUrls&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; csrfToken&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; personaNavigator&lt;span style="color: #990000"&gt;;&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; initialize &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;navigator&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; token&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;)&lt;/span&gt;&lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        accountUrls &lt;span style="color: #990000"&gt;=&lt;/span&gt; urls_&lt;span style="color: #990000"&gt;;&lt;/span&gt;
        csrfToken &lt;span style="color: #990000"&gt;=&lt;/span&gt; token&lt;span style="color: #990000"&gt;;&lt;/span&gt;
        $&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'#id_login'&lt;/span&gt;&lt;span style="color: #990000"&gt;).&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;on&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'click'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
            navigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;request&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt;
        &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

        navigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;watch&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
            loggedInUser&lt;span style="color: #990000"&gt;:&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt;
            onlogin&lt;span style="color: #990000"&gt;:&lt;/span&gt; submitAssertion&lt;span style="color: #990000"&gt;,&lt;/span&gt;
            onlogout&lt;span style="color: #990000"&gt;:&lt;/span&gt; logOut&lt;span style="color: #990000"&gt;,&lt;/span&gt;
        &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; submitAssertion &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;assertion&lt;span style="color: #990000"&gt;)&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        $&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;post&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;
            accountUrls&lt;span style="color: #990000"&gt;.&lt;/span&gt;login&lt;span style="color: #990000"&gt;,&lt;/span&gt;
            &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; assertion&lt;span style="color: #990000"&gt;:&lt;/span&gt; assertion&lt;span style="color: #990000"&gt;,&lt;/span&gt; csrfmiddlewaretoken&lt;span style="color: #990000"&gt;:&lt;/span&gt; csrfToken &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;
        &lt;span style="color: #990000"&gt;).&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;done&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt; Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;refreshPage &lt;span style="color: #990000"&gt;)&lt;/span&gt;
        &lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;fail&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt; Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;onLoginFailure &lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; logOut &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        $&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;post&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;accountUrls&lt;span style="color: #990000"&gt;.&lt;/span&gt;logout&lt;span style="color: #990000"&gt;).&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;done&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt; Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;refreshPage &lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; onLoginFailure &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        personaNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;logout&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; refreshPage &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; window&lt;span style="color: #990000"&gt;.&lt;/span&gt;location&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;reload&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt; &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;

    $&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;extend&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;window&lt;span style="color: #990000"&gt;.&lt;/span&gt;Superlists&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        Accounts&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
            initialize&lt;span style="color: #990000"&gt;:&lt;/span&gt; initialize&lt;span style="color: #990000"&gt;,&lt;/span&gt;
            logOut&lt;span style="color: #990000"&gt;:&lt;/span&gt; logOut&lt;span style="color: #990000"&gt;,&lt;/span&gt;
            onLoginFailure&lt;span style="color: #990000"&gt;:&lt;/span&gt; onLoginFailure&lt;span style="color: #990000"&gt;,&lt;/span&gt;
            refreshPage&lt;span style="color: #990000"&gt;:&lt;/span&gt; refreshPage&lt;span style="color: #990000"&gt;,&lt;/span&gt;
            submitAssertion&lt;span style="color: #990000"&gt;:&lt;/span&gt; submitAssertion
        &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;What the heck happened? At each stage I just tried to make sane,
self-contained unit tests, and I end up with this long and, I think,
much less readable code! Look at all that painful yanking of variables
up into a higher scope, and the contortions I&amp;#8217;m putting myself to give
them sensible names!  Look at all that mess on the Superlists.Accounts
namespace!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_doctor_doctor_it_hurts_when_i_do_this"&gt;Doctor, Doctor, it hurts when I do this!&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So stop doing that.  Near the end of this adventure, I decided it was
time to investigate a proper mocking library. &lt;a href="http://sinonjs.org"&gt;sinon.js&lt;/a&gt;
seemed popular, and guess what&amp;#8201;&amp;#8212;&amp;#8201;it totally solved all my problems.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Look how much more readable the tests are:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"initialize calls navigator.id.watch"&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; token&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;watch&lt;span style="color: #990000"&gt;.&lt;/span&gt;calledOnce&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check watch function called'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;


&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"watch sees current user"&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; token&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; callArgs &lt;span style="color: #990000"&gt;=&lt;/span&gt; mockNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;watch&lt;span style="color: #990000"&gt;.&lt;/span&gt;firstCall&lt;span style="color: #990000"&gt;.&lt;/span&gt;args&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #993399"&gt;0&lt;/span&gt;&lt;span style="color: #990000"&gt;];&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;callArgs&lt;span style="color: #990000"&gt;.&lt;/span&gt;loggedInUser&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check user'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"onlogin does ajax post to login url"&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; token&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; onloginCallback &lt;span style="color: #990000"&gt;=&lt;/span&gt; mockNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;watch&lt;span style="color: #990000"&gt;.&lt;/span&gt;firstCall&lt;span style="color: #990000"&gt;.&lt;/span&gt;args&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #993399"&gt;0&lt;/span&gt;&lt;span style="color: #990000"&gt;].&lt;/span&gt;onlogin&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;onloginCallback&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;requests&lt;span style="color: #990000"&gt;.&lt;/span&gt;length&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #993399"&gt;1&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check ajax request'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;requests&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #993399"&gt;0&lt;/span&gt;&lt;span style="color: #990000"&gt;].&lt;/span&gt;method&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'POST'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;requests&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #993399"&gt;0&lt;/span&gt;&lt;span style="color: #990000"&gt;].&lt;/span&gt;url&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;.&lt;/span&gt;login&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'check url'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"onlogin sends assertion with middleware token"&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; token&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; onloginCallback &lt;span style="color: #990000"&gt;=&lt;/span&gt; mockNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;watch&lt;span style="color: #990000"&gt;.&lt;/span&gt;firstCall&lt;span style="color: #990000"&gt;.&lt;/span&gt;args&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #993399"&gt;0&lt;/span&gt;&lt;span style="color: #990000"&gt;].&lt;/span&gt;onlogin&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; assertion &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'browser-id assertion'&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;onloginCallback&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;assertion&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;
        requests&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #993399"&gt;0&lt;/span&gt;&lt;span style="color: #990000"&gt;].&lt;/span&gt;requestBody&lt;span style="color: #990000"&gt;,&lt;/span&gt;
        $&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;param&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;{&lt;/span&gt; assertion&lt;span style="color: #990000"&gt;:&lt;/span&gt; assertion&lt;span style="color: #990000"&gt;,&lt;/span&gt; csrfmiddlewaretoken&lt;span style="color: #990000"&gt;:&lt;/span&gt; token &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;),&lt;/span&gt;
        &lt;span style="color: #FF0000"&gt;'check POST data'&lt;/span&gt;
    &lt;span style="color: #990000"&gt;);&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"onlogin post failure should do navigator.id.logout "&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    mockNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;logout &lt;span style="color: #990000"&gt;=&lt;/span&gt; sinon&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;spy&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt;
    Superlists&lt;span style="color: #990000"&gt;.&lt;/span&gt;Accounts&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; token&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;);&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; onloginCallback &lt;span style="color: #990000"&gt;=&lt;/span&gt; mockNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;watch&lt;span style="color: #990000"&gt;.&lt;/span&gt;firstCall&lt;span style="color: #990000"&gt;.&lt;/span&gt;args&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #993399"&gt;0&lt;/span&gt;&lt;span style="color: #990000"&gt;].&lt;/span&gt;onlogin&lt;span style="color: #990000"&gt;;&lt;/span&gt;
    server &lt;span style="color: #990000"&gt;=&lt;/span&gt; sinon&lt;span style="color: #990000"&gt;.&lt;/span&gt;fakeServer&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt;
    server&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;respondWith&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;([&lt;/span&gt;&lt;span style="color: #993399"&gt;403&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{}&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;"permission denied"&lt;/span&gt;&lt;span style="color: #990000"&gt;]);&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;onloginCallback&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;logout&lt;span style="color: #990000"&gt;.&lt;/span&gt;called&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;false&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'should not logout yet'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

    server&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;respond&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;equal&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;mockNavigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;logout&lt;span style="color: #990000"&gt;.&lt;/span&gt;called&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'should call logout'&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That last one is testing a callback nested fully 3 levels deep, and it&amp;#8217;s still
totally readable.  Sinon&amp;#8217;s &lt;span class="monospaced"&gt;fakeServer&lt;/span&gt; makes checking callbacks on Ajax
requests a breeze.  Sure, there&amp;#8217;s still a bit too much boilerplate, the fact
that &lt;span class="monospaced"&gt;.requestBody&lt;/span&gt; is URL-encoded and the only way to check send POST params
is a little annoying for example, but with this kind of testing I can get right
back to writing code the way I had it in the first place.&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;var&lt;/span&gt;&lt;/span&gt; initialize &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;navigator&lt;span style="color: #990000"&gt;,&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt; token&lt;span style="color: #990000"&gt;,&lt;/span&gt; urls&lt;span style="color: #990000"&gt;)&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
    $&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'#id_login'&lt;/span&gt;&lt;span style="color: #990000"&gt;).&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;on&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'click'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        navigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;request&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;

    navigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;watch&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
        loggedInUser&lt;span style="color: #990000"&gt;:&lt;/span&gt; user&lt;span style="color: #990000"&gt;,&lt;/span&gt;
        onlogin&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;assertion&lt;span style="color: #990000"&gt;)&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
            $&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;post&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;
                urls&lt;span style="color: #990000"&gt;.&lt;/span&gt;login&lt;span style="color: #990000"&gt;,&lt;/span&gt;
                &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; assertion&lt;span style="color: #990000"&gt;:&lt;/span&gt; assertion&lt;span style="color: #990000"&gt;,&lt;/span&gt; csrfmiddlewaretoken&lt;span style="color: #990000"&gt;:&lt;/span&gt; token &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;
            &lt;span style="color: #990000"&gt;)&lt;/span&gt;
            &lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;done&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; window&lt;span style="color: #990000"&gt;.&lt;/span&gt;location&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;reload&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt; &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;)&lt;/span&gt;
            &lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;fail&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; navigator&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;logout&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt; &lt;span style="color: #FF0000"&gt;}&lt;/span&gt; &lt;span style="color: #990000"&gt;);&lt;/span&gt;
        &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt;
        onlogout&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;assertion&lt;span style="color: #990000"&gt;)&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt;
            $&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;post&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;urls&lt;span style="color: #990000"&gt;.&lt;/span&gt;logout&lt;span style="color: #990000"&gt;)&lt;/span&gt;
            &lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;always&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;function&lt;/span&gt;&lt;/span&gt; &lt;span style="color: #990000"&gt;()&lt;/span&gt; &lt;span style="color: #FF0000"&gt;{&lt;/span&gt; window&lt;span style="color: #990000"&gt;.&lt;/span&gt;location&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;reload&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;();&lt;/span&gt; &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
        &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;
    &lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;);&lt;/span&gt;
&lt;span style="color: #FF0000"&gt;}&lt;/span&gt;&lt;span style="color: #990000"&gt;;&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Perfectly readable.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_but_isn_8217_t_tdd_supposed_to_make_you_break_up_monolithic_code_blocks"&gt;But isn&amp;#8217;t TDD supposed to make you break up monolithic code blocks?&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So that&amp;#8217;s a question - one of the supposed advantages of unit testing
is that, when you find yourself struggling to write tests, you often
find yourself re-writing your code so that is uses several, smaller,
self-contained, more easily testable components, and your code is
improved as a result.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;In this case though, my code was definitely not being improved&amp;#8201;&amp;#8212;&amp;#8201;or
at least, that&amp;#8217;s what I think.  Would anyone disagree?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Ultimately I think it was a matter of using the wrong tool for the job.
Once I had a decent mocking library, I was able to get back to
good-looking code and good-looking tests.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Another thing is that nested callbacks are just quite a natural part
of client-side JavaScript.  GUI / UI / Async code just isn&amp;#8217;t the same
as server-side code I guess, so I shouldn&amp;#8217;t be surprise if it follows
slightly different patterns of readability.  What do you think?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Anyway folks, if you&amp;#8217;re not using a mocking library to test your Ajax code,
you should definitely try one.  &lt;a href="http://sinonjs.org"&gt;sinon.js&lt;/a&gt; worked
well for me, there are others out there in the wonderfully diverse
JS testing ecosystem.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;More info on Mozilla Persona, unit testing javascript and TDD in
my book, &lt;a href="http://chimera.labs.oreilly.com/books/1234000000754/ch14.html"&gt;chapter
14 of which&lt;/a&gt; prompted this write-up.  You should check it out. It&amp;#8217;s
got a great joke with Henry Ford in it, which I&amp;#8217;m particularly proud
of.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="JavaScript"></category><category term="Qunit"></category><category term="sinon"></category><category term="mocking"></category><category term="Ajax"></category><category term="dependency injection"></category></entry><entry><title>Testing Django Class-Based (Generic) Views</title><link href="http://www.obeythetestinggoat.com/testing-django-class-based-generic-views-None.html" rel="alternate"></link><updated>2013-09-27T16:30:00+01:00</updated><author><name>Harry</name></author><id>tag:www.obeythetestinggoat.com,2013-09-27:testing-django-class-based-generic-views-None.html</id><summary type="html">&lt;div id="preamble"&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This blog post is a first rough draft of a planned appendix to my
&lt;a href="http://www.obeythetestinggoat.com/pages/book.html"&gt;book&lt;/a&gt;.  It follows
on from Chapter 9, which is all about forms and validation. You can
&lt;a href="http://chimera.labs.oreilly.com/books/1234000000754/ch09.html"&gt;take a look at it
here&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;If you want to check out the code to have a play with the examples, you&amp;#8217;ll
find them on GitHub under the
&lt;a href="https://github.com/hjwp/book-example/tree/chapter_09"&gt;chapter_09 branch&lt;/a&gt; and
the
&lt;a href="https://github.com/hjwp/book-example/tree/appendix_II"&gt;appendix_II branch&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As you&amp;#8217;ll see, the content starts out sounding a lot like a "proper" chapter
for a book, and turns into more of a blog post and request for comments.
Please do let me know what you think!&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="_update_2013_10_05"&gt;Update 2013-10-05&lt;/h5&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;There&amp;#8217;s been some interesting discussion with minds much greater than my own,
such as those of Messrs Russell Keith-MaGee and Trey Hunner, which, for one
reason or another, has taken place as line comments on github. Do check it out:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://github.com/hjwp/www.obeythetestinggoat.com/commit/c5857b416e404c9af5a9205fbf1b10dccaf8161d"&gt;https://github.com/hjwp/www.obeythetestinggoat.com/commit/c5857b416e404c9af5a9205fbf1b10dccaf8161d&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="_update_2013_10_16"&gt;Update 2013-10-16&lt;/h5&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My basic conclusion for how to test CBGVs is now: make sure you have lots of
short, single-assertion tests for your views, and it will be easy to adjust
to using class-based views from function-based ones, and vice-versa.  Cf the
re-cap at the end of chapter 11:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://chimera.labs.oreilly.com/books/1234000000754/ch11.html#_using_the_existing_lists_item_form_in_the_list_view"&gt;http://chimera.labs.oreilly.com/books/1234000000754/ch11.html#_using_the_existing_lists_item_form_in_the_list_view&lt;/a&gt;
(scroll right to the end)&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And the updated version of this post / appendix:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="http://chimera.labs.oreilly.com/books/1234000000754/apb.html"&gt;http://chimera.labs.oreilly.com/books/1234000000754/apb.html&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="_appendix_ii_django_class_based_views"&gt;Appendix II: Django Class-based views&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This appendix follows on from Chapter 9, in which we implemented Django forms
for validation, and refactored our views.  By the end of that chapter, our
views were still using functions.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;The new shiny in the Django world, however, is class-based views. In this
chapter, we&amp;#8217;ll refactor our application to use them instead of view functions.
More specifically, we&amp;#8217;ll have a go at using class-based &lt;em&gt;generic&lt;/em&gt; views.&lt;/p&gt;&lt;/div&gt;
&lt;div class="admonitionblock"&gt;
&lt;table&gt;&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Warning&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;this appendix is currently more of a blog post / request for comments
than a final appendix.  Use at your own peril.&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_class_based_generic_views"&gt;Class-based generic views&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It&amp;#8217;s worth making a distinction at this point, between class-based views and
class-based &lt;em&gt;generic&lt;/em&gt; views.  Class-based views are just another way of
defining view functions.  They make few assumptions about what your views will
do, and they offer one major benefit over view functions, which is that they
can be subclassed.  This comes, arguably, at the expense of being less readable
than traditional function-based views.  The main use case for &lt;em&gt;plain&lt;/em&gt;
class-based views is when you have several views that re-use the same logic.
We want to obey the DRY principle. With function-based views, you would use
helper functions or decorators.  The theory is that using a class structure may
give you a more elegant solution.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Class-based &lt;em&gt;generic&lt;/em&gt; views are class-based views that attempt to provide
ready-made solutions to common use cases:  fetching an object from the
database and passing it to a template, fetching a list of objects, saving
user input from a POST request using a ModelForm, and so on.  These sound very
much like our use cases, but as we&amp;#8217;ll soon see, the devil is in the detail.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I should say at this point that I&amp;#8217;ve not used either kind of class-based views
much. I can definitely see the sense in them, and there are potentially many
use cases in Django apps where CBGVs would fit in perfectly. However, as soon
as your use case is slightly outside the basics&amp;#8201;&amp;#8212;&amp;#8201;as soon as you have more
than one model you want to use, for example, I&amp;#8217;ve found that using class-based
views becomes much more complicated, and you end up with code that&amp;#8217;s harder to
read than a classic view function.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Still, because we&amp;#8217;re forced to use a lot of the customisation options for
class-based views, implementing them in this case can teach us a lot about
how they work, and how we can unit tests them.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;My hope is that the same unit tests we use for function-based views should
work just as well for class-based views.  Let&amp;#8217;s see how we get on.&lt;/p&gt;&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_the_home_page_as_a_formview"&gt;The home page as a FormView&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Our home page just displays a form on a template:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;home_page&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;request&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;render&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;request&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'home.html'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #990000"&gt;{&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'form'&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;ItemForm&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()})&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/1.5/ref/class-based-views/"&gt;Looking through
the options&lt;/a&gt;, Django has a generic view called &lt;span class="monospaced"&gt;FormView&lt;/span&gt;&amp;#8201;&amp;#8212;&amp;#8201;let&amp;#8217;s see how that
goes:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/views.py (ch21l001)&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000080"&gt;from&lt;/span&gt;&lt;/span&gt; django&lt;span style="color: #990000"&gt;.&lt;/span&gt;views&lt;span style="color: #990000"&gt;.&lt;/span&gt;generic &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000080"&gt;import&lt;/span&gt;&lt;/span&gt; FormView
&lt;span style="color: #990000"&gt;[...]&lt;/span&gt;

&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;HomePageView&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;FormView&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    template_name &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'home.html'&lt;/span&gt;
    form_class &lt;span style="color: #990000"&gt;=&lt;/span&gt; ItemForm&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;We tell it what template we want to use, and which form. Then, we
just need to update &lt;em&gt;urls.py&lt;/em&gt;, replacing the line that used to say
&lt;span class="monospaced"&gt;lists.views.home_page&lt;/span&gt;:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;superlists/urls.py (ch21l002)&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;url&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;r&lt;span style="color: #FF0000"&gt;'^$'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; HomePageView&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;as_view&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(),&lt;/span&gt; name&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'home'&lt;/span&gt;&lt;span style="color: #990000"&gt;),&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And the tests all check out! That was easy..&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content monospaced"&gt;
&lt;pre&gt;$ python3 manage.py test lists
Creating test database for alias 'default'...
......................
 ---------------------------------------------------------------------
Ran 22 tests in 0.134s

OK
Destroying test database for alias 'default'...

$ python3 manage.py test functional_tests
Creating test database for alias 'default'...
....
 ---------------------------------------------------------------------
Ran 4 tests in 15.160s

OK
Destroying test database for alias 'default'...&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;So far so good. We&amp;#8217;ve replaced a 1-line view function with a 2-line class,
but it&amp;#8217;s still very readable. This would be a good time for a commit&amp;#8230;&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_using_form_valid_to_customise_a_createview"&gt;Using form_valid to customise a CreateView&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Next we have a crack at the view we use to create a brand new list, currently
the &lt;span class="monospaced"&gt;new_list&lt;/span&gt; function.  Looking through the possible CBGVs, we
probably want a &lt;span class="monospaced"&gt;CreateView&lt;/span&gt;, and we know we&amp;#8217;re using the &lt;span class="monospaced"&gt;ItemForm&lt;/span&gt; class,
so let&amp;#8217;s see how we get on with them, and whether the tests will help us:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/views.py&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;NewListView&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;CreateView&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    form_class &lt;span style="color: #990000"&gt;=&lt;/span&gt; ItemForm

&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;new_list&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;request&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    form &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;ItemForm&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;data&lt;span style="color: #990000"&gt;=&lt;/span&gt;request&lt;span style="color: #990000"&gt;.&lt;/span&gt;POST&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;if&lt;/span&gt;&lt;/span&gt; form&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;is_valid&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;():&lt;/span&gt;
        list &lt;span style="color: #990000"&gt;=&lt;/span&gt; List&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
        Item&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;text&lt;span style="color: #990000"&gt;=&lt;/span&gt;request&lt;span style="color: #990000"&gt;.&lt;/span&gt;POST&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'text'&lt;/span&gt;&lt;span style="color: #990000"&gt;],&lt;/span&gt; list&lt;span style="color: #990000"&gt;=&lt;/span&gt;list&lt;span style="color: #990000"&gt;)&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;redirect&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;list&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;render&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;request&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'home.html'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #990000"&gt;{&lt;/span&gt;&lt;span style="color: #FF0000"&gt;"form"&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt; form&lt;span style="color: #990000"&gt;})&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;m going to leave the old view function in &lt;em&gt;views.py&lt;/em&gt;, so that we can copy
code across from it.  We can delete it once everything is working.  It&amp;#8217;s
harmless as soon as we switch over the URL mappings, this time in:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/urls.py&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;url&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;r&lt;span style="color: #FF0000"&gt;'^new$'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; NewListView&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;as_view&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(),&lt;/span&gt; name&lt;span style="color: #990000"&gt;=&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'new_list'&lt;/span&gt;&lt;span style="color: #990000"&gt;),&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Now running the tests gives 3 errors:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content monospaced"&gt;
&lt;pre&gt;$ python3 manage.py test lists
Creating test database for alias 'default'...
...................EEE
======================================================================
ERROR: test_redirects_after_POST (lists.tests.test_views.NewListTest)
 ---------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/harry/Dropbox/book/source/appendix_II/superlists/lists/tests/test_views.py", line 33, in test_redirects_after_POST
    data={'text': 'A new list item'}
    [...]
  File "/usr/local/lib/python3.3/dist-packages/django/forms/models.py", line 370, in save
    fail_message, commit, construct=False)
  File "/usr/local/lib/python3.3/dist-packages/django/forms/models.py", line 87, in save_instance
    instance.save()
  File "/home/harry/Dropbox/book/source/appendix_II/superlists/lists/models.py", line 26, in save
    self.full_clean()
  File "/usr/local/lib/python3.3/dist-packages/django/db/models/base.py", line 926, in full_clean
    raise ValidationError(errors)
django.core.exceptions.ValidationError: {'list': ['This field cannot be null.']}

======================================================================
ERROR: test_saving_a_POST_request (lists.tests.test_views.NewListTest)
 ---------------------------------------------------------------------
[...]
django.core.exceptions.ValidationError: {'list': ['This field cannot be null.']}

======================================================================
ERROR: test_validation_errors_sent_back_to_home_page_template (lists.tests.test_views.NewListTest)
 ---------------------------------------------------------------------
[...]
django.template.base.TemplateDoesNotExist: No template names provided

 ---------------------------------------------------------------------
Ran 22 tests in 0.114s

FAILED (errors=3)
Destroying test database for alias 'default'...&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;TODO: talk through decoding traceback.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s start with the third&amp;#8201;&amp;#8212;&amp;#8201;maybe we can just add the template?&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/views.py&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;NewListView&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;CreateView&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    form_class &lt;span style="color: #990000"&gt;=&lt;/span&gt; ItemForm
    template_name &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'home.html'&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That gets us down to just two failures.  They&amp;#8217;re both to do with dealing
with &lt;em&gt;valid&lt;/em&gt; POST requests.  CBGVs that deal with forms want you to put
any custom code for valid forms in a method called &lt;span class="monospaced"&gt;form_valid&lt;/span&gt;.  We can
just copy across some of the code from the old view function:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/views.py&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;NewListView&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;CreateView&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    template_name &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'home.html'&lt;/span&gt;
    form_class &lt;span style="color: #990000"&gt;=&lt;/span&gt; ItemForm

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;form_valid&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;self&lt;span style="color: #990000"&gt;,&lt;/span&gt; form&lt;span style="color: #990000"&gt;):&lt;/span&gt;
        list &lt;span style="color: #990000"&gt;=&lt;/span&gt; List&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
        Item&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;text&lt;span style="color: #990000"&gt;=&lt;/span&gt;form&lt;span style="color: #990000"&gt;.&lt;/span&gt;cleaned_data&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'text'&lt;/span&gt;&lt;span style="color: #990000"&gt;],&lt;/span&gt; list&lt;span style="color: #990000"&gt;=&lt;/span&gt;list&lt;span style="color: #990000"&gt;)&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;redirect&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;list&lt;span style="color: #990000"&gt;)&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;That gets us a pass!&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content monospaced"&gt;
&lt;pre&gt;$ python3 manage.py test lists
Ran 22 tests in 0.117s
OK
$ python3 manage.py test functional_tests
Ran 4 tests in 15.157s
OK&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And we can even save two lines (DRY) by taking advantage of the real point of
CBVs: inheritance!&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/views.py&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;NewListView&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;CreateView&lt;span style="color: #990000"&gt;,&lt;/span&gt; HomePageView&lt;span style="color: #990000"&gt;):&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;form_valid&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;self&lt;span style="color: #990000"&gt;,&lt;/span&gt; form&lt;span style="color: #990000"&gt;):&lt;/span&gt;
        list &lt;span style="color: #990000"&gt;=&lt;/span&gt; List&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
        Item&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;text&lt;span style="color: #990000"&gt;=&lt;/span&gt;form&lt;span style="color: #990000"&gt;.&lt;/span&gt;cleaned_data&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'text'&lt;/span&gt;&lt;span style="color: #990000"&gt;],&lt;/span&gt; list&lt;span style="color: #990000"&gt;=&lt;/span&gt;list&lt;span style="color: #990000"&gt;)&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;redirect&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'/lists/%d/'&lt;/span&gt; &lt;span style="color: #990000"&gt;%&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;list&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;,))&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;And all the tests still pass.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;How does it compare to the old version? I&amp;#8217;d say that&amp;#8217;s not bad.   We save some
boilerplate code, and the view is still fairly legible.  So far, I&amp;#8217;d say we&amp;#8217;ve
got one point for CBGVs, and one draw.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect3"&gt;
&lt;h4 id="_a_more_complex_view_to_handle_both_viewing_and_adding_to_a_list"&gt;A more complex view to handle both viewing and adding to a list&lt;/h4&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;This took me &lt;em&gt;several&lt;/em&gt; attempts.  And I have to say that, although the tests
told me when I got it right, they didn&amp;#8217;t really help me to figure out the
steps to get there&amp;#8230;  Mostly it was just trial and error, hacking about
in functions like &lt;span class="monospaced"&gt;get_context_data&lt;/span&gt;, &lt;span class="monospaced"&gt;get_form_kwargs&lt;/span&gt; and so on.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;One thing I did do which improved my codebase was to add a new unit test:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/tests/test_views.py&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;ListViewTest&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;TestCase&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    &lt;span style="color: #990000"&gt;[...]&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test_list_view_displays_form_for_existing_lists&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;self&lt;span style="color: #990000"&gt;):&lt;/span&gt;
        correct_list &lt;span style="color: #990000"&gt;=&lt;/span&gt; List&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
        response &lt;span style="color: #990000"&gt;=&lt;/span&gt; self&lt;span style="color: #990000"&gt;.&lt;/span&gt;client&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'/lists/%d/'&lt;/span&gt; &lt;span style="color: #990000"&gt;%&lt;/span&gt; &lt;span style="color: #990000"&gt;(&lt;/span&gt;correct_list&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;,))&lt;/span&gt;
        self&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;assertIsInstance&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;response&lt;span style="color: #990000"&gt;.&lt;/span&gt;context&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'form'&lt;/span&gt;&lt;span style="color: #990000"&gt;],&lt;/span&gt; ExistingListItemForm&lt;span style="color: #990000"&gt;)&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;It&amp;#8217;s another good example of the "each test should test one thing" heuristic:
that check on the form class could very easily have been tacked onto the end
of a different test, but having it separate means I&amp;#8217;m immediately told exactly
what&amp;#8217;s wrong, rather than potentially having the error masked by an earlier
failure.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;TODO: consider moving this test into ch. 9?&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Anyway, after much hacking and swearing, this is the solution I eventually got
to work:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/views.py&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;ViewAndAddToList&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;CreateView&lt;span style="color: #990000"&gt;,&lt;/span&gt; SingleObjectMixin&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    template_name &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'list.html'&lt;/span&gt;
    model &lt;span style="color: #990000"&gt;=&lt;/span&gt; List
    form_class &lt;span style="color: #990000"&gt;=&lt;/span&gt; ExistingListItemForm

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get_form&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;self&lt;span style="color: #990000"&gt;,&lt;/span&gt; form_class&lt;span style="color: #990000"&gt;):&lt;/span&gt;
        self&lt;span style="color: #990000"&gt;.&lt;/span&gt;object &lt;span style="color: #990000"&gt;=&lt;/span&gt; self&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get_object&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;if&lt;/span&gt;&lt;/span&gt; self&lt;span style="color: #990000"&gt;.&lt;/span&gt;request&lt;span style="color: #990000"&gt;.&lt;/span&gt;method &lt;span style="color: #990000"&gt;==&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'POST'&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt;
            data&lt;span style="color: #990000"&gt;={&lt;/span&gt;
                &lt;span style="color: #FF0000"&gt;'text'&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt; self&lt;span style="color: #990000"&gt;.&lt;/span&gt;request&lt;span style="color: #990000"&gt;.&lt;/span&gt;POST&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'text'&lt;/span&gt;&lt;span style="color: #990000"&gt;],&lt;/span&gt;
                &lt;span style="color: #FF0000"&gt;'list'&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt; self&lt;span style="color: #990000"&gt;.&lt;/span&gt;object&lt;span style="color: #990000"&gt;.&lt;/span&gt;id
            &lt;span style="color: #990000"&gt;}&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt;
            data &lt;span style="color: #990000"&gt;=&lt;/span&gt; None
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;form_class&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;data&lt;span style="color: #990000"&gt;=&lt;/span&gt;data&lt;span style="color: #990000"&gt;)&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I also had to add a &lt;span class="monospaced"&gt;get_absolute_url&lt;/span&gt; on the &lt;span class="monospaced"&gt;Item&lt;/span&gt; class:&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;(I did try to use &lt;span class="monospaced"&gt;get_form_kwargs&lt;/span&gt; instead of &lt;span class="monospaced"&gt;get_form&lt;/span&gt;, but it didn&amp;#8217;t want
to work for me.  Perhaps some CBGV expert out there has a neater solution??)&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="title"&gt;lists/models.py&lt;/div&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;class&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;Item&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;models&lt;span style="color: #990000"&gt;.&lt;/span&gt;Model&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    &lt;span style="color: #990000"&gt;[...]&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get_absolute_url&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;self&lt;span style="color: #990000"&gt;):&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; self&lt;span style="color: #990000"&gt;.&lt;/span&gt;list&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get_absolute_url&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="sect4"&gt;
&lt;h5 id="_compare_old_and_new"&gt;Compare old and new&lt;/h5&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Let&amp;#8217;s see the old version for comparison?&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;view_list&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;request&lt;span style="color: #990000"&gt;,&lt;/span&gt; list_id&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    list &lt;span style="color: #990000"&gt;=&lt;/span&gt; List&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;id&lt;span style="color: #990000"&gt;=&lt;/span&gt;list_id&lt;span style="color: #990000"&gt;)&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;if&lt;/span&gt;&lt;/span&gt; request&lt;span style="color: #990000"&gt;.&lt;/span&gt;method &lt;span style="color: #990000"&gt;==&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'POST'&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt;
        form &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;ExistingListItemForm&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;data&lt;span style="color: #990000"&gt;={&lt;/span&gt;
            &lt;span style="color: #FF0000"&gt;'text'&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt; request&lt;span style="color: #990000"&gt;.&lt;/span&gt;POST&lt;span style="color: #990000"&gt;[&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'text'&lt;/span&gt;&lt;span style="color: #990000"&gt;],&lt;/span&gt;
            &lt;span style="color: #FF0000"&gt;'list'&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt; list&lt;span style="color: #990000"&gt;.&lt;/span&gt;id
        &lt;span style="color: #990000"&gt;})&lt;/span&gt;
        &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;if&lt;/span&gt;&lt;/span&gt; form&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;is_valid&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;():&lt;/span&gt;
            form&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;save&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
            &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;redirect&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;list&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;else&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt;
        form &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;ExistingListItemForm&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;

    &lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;return&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;render&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;request&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;'list.html'&lt;/span&gt;&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #990000"&gt;{&lt;/span&gt;&lt;span style="color: #FF0000"&gt;'list'&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt; list&lt;span style="color: #990000"&gt;,&lt;/span&gt; &lt;span style="color: #FF0000"&gt;"form"&lt;/span&gt;&lt;span style="color: #990000"&gt;:&lt;/span&gt; form&lt;span style="color: #990000"&gt;})&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;Not a great improvement.  Same number of lines of code, 15.  If anything, the
function version is better because it has one more line of whitespace. And it&amp;#8217;s
definitely more readable.&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="_best_practices_for_unit_testing_cbgvs"&gt;Best practices for unit testing CBGVs?&lt;/h3&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;As I was working through this, I felt like my "unit" tests were sometimes a
little too high-level.  They told me whether I was getting things right or
wrong, but they didn&amp;#8217;t offer many clues on exactly how to fix things.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I occasionally wondered whether there might be some mileage in a test that
was closer to the implementation&amp;#8201;&amp;#8212;&amp;#8201;something like this:&lt;/p&gt;&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;&lt;!-- Generator: GNU source-highlight 3.1.6
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --&gt;
&lt;pre&gt;&lt;tt&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #0000FF"&gt;def&lt;/span&gt;&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;test_as_cbv&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;self&lt;span style="color: #990000"&gt;):&lt;/span&gt;
    our_list &lt;span style="color: #990000"&gt;=&lt;/span&gt; List&lt;span style="color: #990000"&gt;.&lt;/span&gt;objects&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;create&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
    view &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;ViewAndAddToList&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;()&lt;/span&gt;
    view&lt;span style="color: #990000"&gt;.&lt;/span&gt;kwargs &lt;span style="color: #990000"&gt;=&lt;/span&gt; &lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;dict&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;pk&lt;span style="color: #990000"&gt;=&lt;/span&gt;our_list&lt;span style="color: #990000"&gt;.&lt;/span&gt;id&lt;span style="color: #990000"&gt;)&lt;/span&gt;
    self&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;assertEqual&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(&lt;/span&gt;view&lt;span style="color: #990000"&gt;.&lt;/span&gt;&lt;span style="font-weight: bold"&gt;&lt;span style="color: #000000"&gt;get_object&lt;/span&gt;&lt;/span&gt;&lt;span style="color: #990000"&gt;(),&lt;/span&gt; our_list&lt;span style="color: #990000"&gt;)&lt;/span&gt;&lt;/tt&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;But the problem is that it requires a lot of knowledge of the internals of
Django CBVs to be able to do the right test setup for these kinds of tests.
And you still end up getting very confused by the complex inheritance
hierarchy.&lt;/p&gt;&lt;/div&gt;
&lt;div class="paragraph"&gt;&lt;p&gt;I&amp;#8217;d be interested to hear how other people out there are testing their CBVs?&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Django"></category><category term="class-based-views"></category><category term="unit testing"></category></entry></feed>